#include <vector>
#include <cmath>
#include <iostream>
#include <iomanip>

/*
Project Euler, Problem 13

PROBLEM STATEMENT:

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1+2+3+4+5+6+7 = 28.
The first ten terms would be:
1,3,6,10,15,21,28,36,45,55,...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
 
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

void factor(const double triangle_n, std::vector<double>& factors){
  //
  // Populate list with factors of a.
  //
  factors.clear();
  if(triangle_n == 1){
    factors.push_back(1);
    return;
  }
  double limit = std::floor(std::pow(triangle_n, 0.5));
  for(auto i = 1; i <= limit; ++i){
    if((long long)triangle_n % (long long)i == 0){
      factors.push_back(i);
      if(i != limit){
	factors.push_back(triangle_n / i);
      }
    }
  }
  return;
}

void report(const double triangle_n, const std::vector<double>& factors){
  //
  // Print report for triangle number and its factors
  //
  std::cout << "Triangle Number: " << triangle_n << std::endl;
  std::cout << "Factors:         ";
  for(auto& i : factors){
    std::cout << i << ", ";
  }
  std::cout << std::endl;
}

int main(){
  size_t min_factors = 500;
  std::vector<double> factors = {};
  double index = 1;
  double triangle_n = 0;
  std::cout << std::fixed << std::setprecision(0);
  while(true){
    triangle_n += index;
    index += 1;
    std::cout << "Triangle Number: " << triangle_n;
    std::cout << "\r";
    factor(triangle_n, factors);
    if(factors.size() > min_factors){
      report(triangle_n, factors);
      break;
    }
  }
}
